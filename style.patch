diff --git a/helper/thz-energy-model-helper.cc b/helper/thz-energy-model-helper.cc
index d0a1df1..932f182 100644
--- a/helper/thz-energy-model-helper.cc
+++ b/helper/thz-energy-model-helper.cc
@@ -36,10 +36,9 @@
 #include <sstream>
 #include <string>
 
-NS_LOG_COMPONENT_DEFINE("THzEnergyModelHelper");
+NS_LOG_COMPONENT_DEFINE ("THzEnergyModelHelper");
 
-namespace ns3
-{
+namespace ns3 {
 
 THzEnergyModelHelper::THzEnergyModelHelper ()
 {
@@ -47,19 +46,20 @@ THzEnergyModelHelper::THzEnergyModelHelper ()
 }
 
 THzEnergyModelHelper::~THzEnergyModelHelper ()
-{}
+{
+}
 
 void
 THzEnergyModelHelper::Install (NodeContainer c) const
 {
-  
+
   for (NodeContainer::Iterator i = c.Begin (); i != c.End (); i++)
     {
       Ptr<Node> node = *i;
       Ptr<THzEnergyModel> energyModel = m_energyModel.Create<THzEnergyModel> ();
       node->AggregateObject (energyModel);
-      NS_LOG_DEBUG ("node="<<node);
-  }
+      NS_LOG_DEBUG ("node=" << node);
+    }
   return;
 }
 void
diff --git a/helper/thz-energy-model-helper.h b/helper/thz-energy-model-helper.h
index 039a575..dd86086 100644
--- a/helper/thz-energy-model-helper.h
+++ b/helper/thz-energy-model-helper.h
@@ -32,14 +32,13 @@
 #include "ns3/thz-energy-model.h"
 
 
-namespace ns3
-{
+namespace ns3 {
 
 /**
  * \ingroup thz
  *
  * This installer installs THzEnergyModel to the nodes,
- * using ns3 object aggregation 
+ * using ns3 object aggregation
  */
 class THzEnergyModelHelper
 {
@@ -47,16 +46,16 @@ public:
   /**
    * Create a THzEnergyModelHelper
    */
-  THzEnergyModelHelper();
+  THzEnergyModelHelper ();
   /**
    * \internal
    * Destroy a THzEnergyModelHelper
    */
-  virtual ~THzEnergyModelHelper();
+  virtual ~THzEnergyModelHelper ();
   /**
    * For each Ptr<node> in the provided container:
-   * it creates an ns3::THzEnergyModel (with the attributes 
-   * configured by THzEnergyModelHelper::SetEnergyModelAttribute); 
+   * it creates an ns3::THzEnergyModel (with the attributes
+   * configured by THzEnergyModelHelper::SetEnergyModelAttribute);
    * adds the energy model to the node;
    *
    * \param c The NodeContainer holding the nodes to be changed.
diff --git a/model/thz-channel.cc b/model/thz-channel.cc
index e45d68c..f0fe4e2 100755
--- a/model/thz-channel.cc
+++ b/model/thz-channel.cc
@@ -48,12 +48,12 @@ THzChannel::GetTypeId ()
   static TypeId tid = TypeId ("ns3::THzChannel")
     .SetParent<Object> ()
     .AddConstructor<THzChannel> ()
-    .AddAttribute ("THzSpectrumPropagationLoss", 
+    .AddAttribute ("THzSpectrumPropagationLoss",
                    "A pointer to the propagation loss model attached to this channel.",
                    PointerValue (CreateObject<THzSpectrumPropagationLoss> ()),
                    MakePointerAccessor (&THzChannel::m_loss),
                    MakePointerChecker<THzSpectrumPropagationLoss> ())
-    .AddAttribute ("PropagationDelayModel", 
+    .AddAttribute ("PropagationDelayModel",
                    "A pointer to the propagation delay model attached to this channel.",
                    PointerValue (CreateObject<ConstantSpeedPropagationDelayModel> ()),
                    MakePointerAccessor (&THzChannel::m_delay),
@@ -143,7 +143,7 @@ THzChannel::SendPacket (Ptr<THzSpectrumSignalParameters> txParams)
             }
           m_totalGain = itt->first->GetDirAntenna ()->GetAntennaGain (XnodeMobility, YnodeMobility, m_XnodeMode, m_YnodeMode, m_Rxorientation);
           double rxPower = m_loss->CalcRxPowerDA (txParams, XnodeMobility, YnodeMobility, m_totalGain);
-          NS_LOG_DEBUG ("node "<<it->first->GetNode ()->GetId ()<<"->"<<itt->first->GetNode ()->GetId ()<<", txPower = "<< txParams->txPower<<" dBm, totalGain = "<< m_totalGain +30 <<" dBm, rxPower = "<<rxPower<< " dBm"<< "  now: "<< Simulator::Now());
+          NS_LOG_DEBUG ("node " << it->first->GetNode ()->GetId () << "->" << itt->first->GetNode ()->GetId () << ", txPower = " << txParams->txPower << " dBm, totalGain = " << m_totalGain + 30 << " dBm, rxPower = " << rxPower << " dBm" << "  now: " << Simulator::Now ());
           uint32_t dstNodeId = itt->first->GetNode ()->GetId ();
           Ptr<Packet> copy = txParams->packet->Copy ();
           ne.packet = copy;
@@ -178,7 +178,7 @@ THzChannel::ReceivePacketDone (uint32_t i, NoiseEntry ne)
 {
   NS_LOG_FUNCTION ("");
   m_devList[i].second->ReceivePacketDone (ne.packet, ne.rxPower);
-  Simulator::ScheduleNow(&THzChannel::DeleteNoiseEntry, this, ne);
+  Simulator::ScheduleNow (&THzChannel::DeleteNoiseEntry, this, ne);
 }
 
 void
diff --git a/model/thz-channel.h b/model/thz-channel.h
index 5b9f593..ac17087 100755
--- a/model/thz-channel.h
+++ b/model/thz-channel.h
@@ -46,9 +46,9 @@ class PropagationDelayModel;
  * \brief A Terahertz Channel
  * \ingroup thz
  *
- * This thz channel implements the propagation model descripted in J.M. Jornet and I.F. Akyildiz, 
+ * This thz channel implements the propagation model descripted in J.M. Jornet and I.F. Akyildiz,
  * "Channel Modeling and Capacity Analysis for Electromagnetic Wireless Nanonetworks in the Terahertz Band"
- * 
+ *
  * This class is expected to be used in tandem with the THzPhyMacro/Nano and ThzDirAntenna
  */
 
@@ -56,7 +56,7 @@ class THzChannel : public Channel
 {
   /**
    * typedef for a list of NoiseEntry
-   * 
+   *
    * This information will be used by PHY layer to obtain SINR value.
    */
   typedef struct
@@ -69,7 +69,6 @@ class THzChannel : public Channel
   } NoiseEntry;
 
 public:
-
   /**
    * Create a THzChannel
    */
@@ -92,11 +91,11 @@ public:
    *
    * \param txParams the data structure of the transmitted packet.
    *
-   * in this function a NoiseEntry will be updated, which recoreds the signel strength a node will receive 
+   * in this function a NoiseEntry will be updated, which recoreds the signel strength a node will receive
    * and how long will the signal exist, this information will be used by terahertz physical layer to calculate SINR.
-   * Also in this function, it checks the antenna mode for sending node and receiving node, by this process it 
+   * Also in this function, it checks the antenna mode for sending node and receiving node, by this process it
    * checking the receiver's orientation and thus the total antenna gain between transmitter and receiver.
-   * Note that the sending node is not necessarily to be the transmitter, e.g., node sending CTS or ACK packet is actually the receiver. 
+   * Note that the sending node is not necessarily to be the transmitter, e.g., node sending CTS or ACK packet is actually the receiver.
    */
   bool SendPacket (Ptr<THzSpectrumSignalParameters> txParams);
 
@@ -109,13 +108,12 @@ public:
 
   /**
    * \brief convert the value from dBm to Watt.
-   * 
+   *
    * \param dbm the value in dBm.
    */
   double DbmToW (double dbm);
 
 private:
-
   /**
    * \brief send packet done in terahertz channel.
    *
@@ -140,7 +138,7 @@ private:
    * \param i the recording of device ID of the receiver.
    * \param ne the noise entry.
    *
-   * Note that if concurrent transmissions end at the same time, some of them can be missed from SINR calculation, so delete 
+   * Note that if concurrent transmissions end at the same time, some of them can be missed from SINR calculation, so delete
    * a noise entry a few seconds later.
    */
   void ReceivePacketDone (uint32_t i, NoiseEntry ne);
@@ -171,7 +169,7 @@ private:
   std::list<Ptr<MobilityModel> > m_recMobList;
 
   /**
-   * A vector of pointers to THzDeviceList 
+   * A vector of pointers to THzDeviceList
    */
   typedef std::vector<std::pair<Ptr<THzNetDevice>, Ptr<THzPhy> > > THzDeviceList;
   THzDeviceList m_devList;
diff --git a/model/thz-dir-antenna.cc b/model/thz-dir-antenna.cc
index 55d684d..30175d9 100644
--- a/model/thz-dir-antenna.cc
+++ b/model/thz-dir-antenna.cc
@@ -168,14 +168,14 @@ THzDirectionalAntenna::TuneRxOrientation (double phi_zero)
   double phi_rx_rad = phi_rx * M_PI / 180.0;
   m_RxorientationDegrees = phi_rx;
   m_RxorientationRadians = phi_rx_rad;
-  NS_LOG_DEBUG("THzDirectionalAntenna::TuneRxOrientation: " << m_RxorientationDegrees);
+  NS_LOG_DEBUG ("THzDirectionalAntenna::TuneRxOrientation: " << m_RxorientationDegrees);
 }
 
 double
 THzDirectionalAntenna::CheckRxOrientation ()
 {
   return m_RxorientationRadians;
-  NS_LOG_DEBUG("THzDirectionalAntenna::CheckRxOrientation: " << RadiansToDegrees(m_RxorientationRadians));
+  NS_LOG_DEBUG ("THzDirectionalAntenna::CheckRxOrientation: " << RadiansToDegrees (m_RxorientationRadians));
 }
 
 
@@ -264,7 +264,7 @@ THzDirectionalAntenna::GetAntennaGain (Ptr<MobilityModel> XnodeMobility, Ptr<Mob
       while (phi_rx > M_PI)
         {
           phi_rx -= M_PI + M_PI;
-        }     
+        }
       double ef_rx = std::pow (std::cos (phi_rx / 2.0), m_exponent);
       double m_rxgainDb = 20 * std::log10 (ef_rx);
       NS_LOG_DEBUG ("   GetRxGainDb " << m_rxgainDb + m_maxGain);
@@ -283,7 +283,7 @@ THzDirectionalAntenna::GetAntennaGain (Ptr<MobilityModel> XnodeMobility, Ptr<Mob
         }
       m_TxorientationDegrees = phi_tx * 180.0 / M_PI;
       m_TxorientationRadians = phi_tx;
-      NS_LOG_DEBUG ("1-Rx = "<< m_RxorientationRadians * 180.0 / M_PI<<" Tx = "<<txAngles.phi* 180.0 / M_PI<<" NOW: "<<Simulator::Now());
+      NS_LOG_DEBUG ("1-Rx = " << m_RxorientationRadians * 180.0 / M_PI << " Tx = " << txAngles.phi * 180.0 / M_PI << " NOW: " << Simulator::Now ());
       double ef_tx = std::pow (std::cos (phi_tx / 2.0), m_exponent);
       double gainDb = 20 * std::log10 (ef_tx);
       m_TxGain = gainDb + m_maxGain;
@@ -319,7 +319,7 @@ THzDirectionalAntenna::GetAntennaGain (Ptr<MobilityModel> XnodeMobility, Ptr<Mob
         }
       m_TxorientationDegrees = phi_tx * 180.0 / M_PI;
       m_TxorientationRadians = phi_tx;
-      NS_LOG_DEBUG ("2-Rx = "<< m_RxorientationRadians * 180.0 / M_PI<<" Tx = "<<txAngles.phi* 180.0 / M_PI<<" NOW: "<<Simulator::Now());
+      NS_LOG_DEBUG ("2-Rx = " << m_RxorientationRadians * 180.0 / M_PI << " Tx = " << txAngles.phi * 180.0 / M_PI << " NOW: " << Simulator::Now ());
       double ef_tx = std::pow (std::cos (phi_tx / 2.0), m_exponent);
       double gainDb = 20 * std::log10 (ef_tx);
       m_TxGain = gainDb + m_maxGain;
diff --git a/model/thz-dir-antenna.h b/model/thz-dir-antenna.h
index ebb9f3f..accbd64 100644
--- a/model/thz-dir-antenna.h
+++ b/model/thz-dir-antenna.h
@@ -59,14 +59,14 @@ public:
   /**
    * \brief enable the directional antenna on certain device
    *
-   * \param device the related device 
+   * \param device the related device
    */
   void SetDevice (Ptr<THzNetDevice> device);
- 
+
   /**
    * \brief check directional antenna mode
    *
-   * if the mode is 0, the device is a directional transmitter; 
+   * if the mode is 0, the device is a directional transmitter;
    * if the mode is 1, the device is a directional receiver;
    * if the mode is 2, the device is an omni-directional tranceiver;
    * Note that the setting of antenna mode between 1 and 2 is depend on a specific receiver-initiated handshake protocol,
@@ -78,7 +78,7 @@ public:
 
   /**
     * \param turnSpeed the turning speed of the directional antenna
-    * 
+    *
     * \brief set the turning speed of the directional antenna on the receiver [circles/sec]
     *
     * in the receiver initiated handshake MAC protocol, the receiver's directional antenna periodically sweeps the entire area to avoid deafness problem.
@@ -93,7 +93,7 @@ public:
   /**
    * \param maxGain the maximum gain of directional antenna
    *
-   * \brief set the maximum gain of the directional antennas for both transmitter and receiver [dB] 
+   * \brief set the maximum gain of the directional antennas for both transmitter and receiver [dB]
    */
   void SetMaxGain (double maxGain);
 
@@ -113,7 +113,7 @@ public:
     * \brief get the beamwidth of the directional antennas for both transmitter and receiver [degrees]
     */
   double GetBeamwidth () const;
-  
+
   /**
     * \param phi_zero initial angle in phi-plane
     *
@@ -123,7 +123,7 @@ public:
 
   /**
     * \brief check the orientation of the receiver's directional antenna based on user setting
-    * 
+    *
     * returns a orientation of sector-by-sector turing directional antenna
     */
   double CheckRxOrientation ();
@@ -143,8 +143,8 @@ public:
   void RecTxOrientation (double phi_tx);
 
   /**
-   * \brief check the orientation of the transmitter's directional antenna 
-   */   
+   * \brief check the orientation of the transmitter's directional antenna
+   */
   double CheckTxOrientation ();
 
   /**
@@ -152,7 +152,7 @@ public:
     * \param recvMobility the mobility of the receiver
     *
     * \brief calculate the directional antenna's gain of the receiver [dB]
-    */ 
+    */
   double GetRxGainDb (Ptr<MobilityModel> senderMobility, Ptr<MobilityModel> recvMobility);
 
   /**
@@ -163,7 +163,7 @@ public:
     */
   double GetTxGainDb (Ptr<MobilityModel> senderMobility, Ptr<MobilityModel> recvMobility);
 
-  /** 
+  /**
     * \param XnodeMobility the mobility of one node of the node pair, which is denoted as X.
     * \param YnodeMobility the mobility of the other node of the node pair, which is denoted as Y.
     * \param XnodeMode the operation mode of the node X.
@@ -171,7 +171,7 @@ public:
     * \param RxorientationRadians the orientation of the receiver node in radians.
     *
     * \brief calculate the total directional antenna's gain between transmitter and receiver [dB].
-    * 
+    *
     * Antenna mode = 1 corresponding to Directional receiver.
     * Antenna mode = 0 corresponding to Directional transmitter.
     * Antenna mode = 2 corresponding to Omni-directional antenna.
diff --git a/model/thz-energy-model.cc b/model/thz-energy-model.cc
index aa7167c..c65eaad 100755
--- a/model/thz-energy-model.cc
+++ b/model/thz-energy-model.cc
@@ -82,7 +82,7 @@ THzEnergyModel::GetTypeId (void)
     .AddTraceSource ("RemainingEnergy",
                      "Remaining energy at THzEnergyModel.",
                      MakeTraceSourceAccessor (&THzEnergyModel::m_remainingEnergy),
-                     "ns3::TracedValueCallback::Double") 
+                     "ns3::TracedValueCallback::Double")
   ;
   return tid;
 }
@@ -153,7 +153,7 @@ THzEnergyModel::HarvestEnergy (void)
   m_remainingEnergy += m_energyHarvestingAmount;
   if (m_remainingEnergy == m_dataCallbacklEnergy)
     {
-      m_energyCbData ();                                 
+      m_energyCbData ();
     }
   m_energyUpdateEvent = Simulator::Schedule (m_energyUpdateInterval,
                                              &THzEnergyModel::HarvestEnergy,
@@ -182,7 +182,7 @@ THzEnergyModel::BookEnergy (double packetLengthTx, double packetLengthRx)
   NS_LOG_FUNCTION ("node id" << m_node->GetId () << " now: " << Simulator::Now ());
 
   double energyBook = packetLengthTx * 8 * m_energyConsumptionPulseTx * m_codingWeight
-                    + packetLengthRx * 8 * m_energyConsumptionPulseRx;
+    + packetLengthRx * 8 * m_energyConsumptionPulseRx;
 
   if ((m_remainingEnergy - energyBook) >= 0)
     {
@@ -199,7 +199,7 @@ THzEnergyModel::ReturnEnergy (double packetLengthTx, double packetLengthRx)
 {
   NS_LOG_FUNCTION (this);
   double energyReturn = packetLengthTx * 8 * m_energyConsumptionPulseTx * m_codingWeight
-                      + packetLengthRx * 8 * m_energyConsumptionPulseRx;
+    + packetLengthRx * 8 * m_energyConsumptionPulseRx;
   m_remainingEnergy += energyReturn;
   NS_LOG_DEBUG ("THzEnergyModel:Remaining energy = " << m_remainingEnergy << " now: " << Simulator::Now ());
 }
diff --git a/model/thz-energy-model.h b/model/thz-energy-model.h
index 04c7f60..375b226 100644
--- a/model/thz-energy-model.h
+++ b/model/thz-energy-model.h
@@ -36,15 +36,15 @@ class Node;
 
 /**
  * \ingroup energy
- * \brief THzEnergyModel models the energy harvesting and consumption by THz nodes 
- * 
+ * \brief THzEnergyModel models the energy harvesting and consumption by THz nodes
+ *
  * This class is installed in the Node by object aggregation facility provided in
  * the classes derived from NS-3 Object. It harvests fixed amount of energy at a
- * user defined interval. It also provides interfaces to consume certain amount of 
+ * user defined interval. It also provides interfaces to consume certain amount of
  * energy. The MAC layer can use the interface to consume energy whenever it transmits
- * or receives a packet. 
+ * or receives a packet.
  */
-class THzEnergyModel : public Object 
+class THzEnergyModel : public Object
 {
 public:
   static TypeId GetTypeId (void);
@@ -57,7 +57,7 @@ public:
   virtual void SetNode (Ptr<Node> node);
   /**
    *
-   * Setting up the callback to inform MAC layer to send Data 
+   * Setting up the callback to inform MAC layer to send Data
    */
   virtual void SetEnergyCallback (Callback<void> energyCbData);
   /**
@@ -122,7 +122,7 @@ private:
 private:
   Ptr<Node> m_node;                       //!< Node attached to this energy model.
   double m_initialEnergy;                 //!< initial energy, in frames
-  
+
   double m_energyHarvestingAmount;        //!< amount of energy harvested each time
   double m_energyConsumptionPulseTx;      //!< amount of energy consumed for transmission of a pulse in frames
   double m_energyConsumptionPulseRx;      //!< amount of energy consumed for reception of a pulse in frames
diff --git a/model/thz-mac-header.cc b/model/thz-mac-header.cc
index d2e95d0..f3d0712 100644
--- a/model/thz-mac-header.cc
+++ b/model/thz-mac-header.cc
@@ -37,9 +37,9 @@ THzMacHeader::THzMacHeader ()
 
 THzMacHeader::THzMacHeader (const Mac48Address srcAddr, const Mac48Address dstAddr, uint8_t type)
   : Header (),
-    m_srcAddr (srcAddr),
-    m_dstAddr (dstAddr),
-    m_type (type)
+  m_srcAddr (srcAddr),
+  m_dstAddr (dstAddr),
+  m_type (type)
 {
 }
 
diff --git a/model/thz-mac-macro.cc b/model/thz-mac-macro.cc
index b6e9f58..265bdbf 100755
--- a/model/thz-mac-macro.cc
+++ b/model/thz-mac-macro.cc
@@ -55,17 +55,17 @@ NS_OBJECT_ENSURE_REGISTERED (THzMacMacro);
 
 THzMacMacro::THzMacMacro ()
   : THzMac (),
-    m_phy (0),
-    m_state (IDLE),
-    m_ccaTimeoutEvent (),
-    m_backoffTimeoutEvent (),
-    m_ctsTimeoutEvent (),
-    m_ackTimeoutEvent (),
-    m_sendCtsEvent (),
-    m_sendAckEvent (),
-    m_sendDataEvent (),
-    m_retry (0),
-    m_pktData (0)
+  m_phy (0),
+  m_state (IDLE),
+  m_ccaTimeoutEvent (),
+  m_backoffTimeoutEvent (),
+  m_ctsTimeoutEvent (),
+  m_ackTimeoutEvent (),
+  m_sendCtsEvent (),
+  m_sendAckEvent (),
+  m_sendDataEvent (),
+  m_retry (0),
+  m_pktData (0)
 
 {
   m_cw = m_cwMin;
@@ -157,11 +157,11 @@ THzMacMacro::GetTypeId (void)
     .AddTraceSource ("CtsTimeout",
                      "Trace Hookup for CTS Timeout",
                      MakeTraceSourceAccessor (&THzMacMacro::m_traceCtsTimeout),
-                     "ns3::THzMac::TimeTracedCallback") 
+                     "ns3::THzMac::TimeTracedCallback")
     .AddTraceSource ("AckTimeout",
                      "Trace Hookup for ACK Timeout",
                      MakeTraceSourceAccessor (&THzMacMacro::m_traceAckTimeout),
-                     "ns3::THzMac::TimeTracedCallback") 
+                     "ns3::THzMac::TimeTracedCallback")
     .AddTraceSource ("SendDataDone",
                      "Trace Hookup for sending a data",
                      MakeTraceSourceAccessor (&THzMacMacro::m_traceSendDataDone),
@@ -391,9 +391,9 @@ THzMacMacro::SetRxAntennaParameters ()
   m_thzAD = m_device->GetDirAntenna ();
   m_thzAD->SetAttribute ("TuneRxTxMode", DoubleValue (1));     // set as receiver
   m_thzAD->SetAttribute ("InitialAngle", DoubleValue (0));
-  double beamwidthDegrees = m_thzAD->GetBeamwidth();  //get default beamwidth
+  double beamwidthDegrees = m_thzAD->GetBeamwidth ();  //get default beamwidth
   m_thzAD->SetBeamwidth (beamwidthDegrees);           //set beamwidth to calculate antenna exponent for thz-dir-antenna module
-  NS_LOG_DEBUG ("Tune as RxMode At node: "<<m_device->GetNode()->GetId() <<" Antenna Mode: "<<m_thzAD->CheckAntennaMode()<<" Antenna Beamwidth: "<<beamwidthDegrees<<" deg, TurningSpeed: "<<m_thzAD->GetRxTurningSpeed()<<" MaxGain: "<<m_thzAD->GetMaxGain()<<"dB");
+  NS_LOG_DEBUG ("Tune as RxMode At node: " << m_device->GetNode ()->GetId () << " Antenna Mode: " << m_thzAD->CheckAntennaMode () << " Antenna Beamwidth: " << beamwidthDegrees << " deg, TurningSpeed: " << m_thzAD->GetRxTurningSpeed () << " MaxGain: " << m_thzAD->GetMaxGain () << "dB");
 
   m_thzAD->TuneRxOrientation (m_rxIniAngle);
   m_rxIniAngle = m_rxIniAngle + beamwidthDegrees;
@@ -406,8 +406,8 @@ THzMacMacro::SetRxAntennaParameters ()
       m_rxIniAngle -= 360;
     }
 
-  Time tCircle = Seconds (1 / m_thzAD->GetRxTurningSpeed());
-  int nSector = 360/beamwidthDegrees;
+  Time tCircle = Seconds (1 / m_thzAD->GetRxTurningSpeed ());
+  int nSector = 360 / beamwidthDegrees;
   Time tSector = NanoSeconds (tCircle.GetNanoSeconds () / nSector);
   NS_LOG_DEBUG ("tSector = " << tSector << ", nSector = " << nSector << ", tCircle = " << tCircle );
   m_SetRxAntennaEvent = Simulator::Schedule (tSector, &THzMacMacro::SetRxAntennaParameters, this);
@@ -434,9 +434,9 @@ THzMacMacro::Enqueue (Ptr<Packet> packet, Mac48Address dest)
       m_thzAD = m_device->GetDirAntenna ();
       m_thzAD->SetAttribute ("TuneRxTxMode", DoubleValue (0)); // set as transmitter
       m_thzAD->SetAttribute ("InitialAngle", DoubleValue (0.0));
-      double beamwidthDegrees = m_thzAD->GetBeamwidth();  //get default beamwidth
+      double beamwidthDegrees = m_thzAD->GetBeamwidth ();  //get default beamwidth
       m_thzAD->SetBeamwidth (beamwidthDegrees);           //set beamwidth to calculate antenna exponent for thz-dir-antenna module
-      NS_LOG_DEBUG ("Tune as TxMode At node: "<<m_device->GetNode()->GetId()<<" Antenna Mode: "<<m_thzAD->CheckAntennaMode()<<" Antenna Beamwidth: "<<beamwidthDegrees<<" deg, MaxGain: "<<m_thzAD->GetMaxGain()<<"dB");
+      NS_LOG_DEBUG ("Tune as TxMode At node: " << m_device->GetNode ()->GetId () << " Antenna Mode: " << m_thzAD->CheckAntennaMode () << " Antenna Beamwidth: " << beamwidthDegrees << " deg, MaxGain: " << m_thzAD->GetMaxGain () << "dB");
 
       Rec rec;
       rec.RecSize = packet->GetSize ();
@@ -1067,22 +1067,22 @@ THzMacMacro::ResultsRecord ()
    * enable the result printing in a .txt file by uncommenting the content in this function
    *----------------------------------------------------------------------------------------*/
 
- /* 
- int seed_num;
-  RngSeedManager seed;
-  seed_num = seed.GetSeed ();
+  /*
+  int seed_num;
+   RngSeedManager seed;
+   seed_num = seed.GetSeed ();
 
-  std::stringstream txtname;
-  txtname << "scratch/result" << seed_num << ".txt";
-  std::string filename = txtname.str ();
+   std::stringstream txtname;
+   txtname << "scratch/result" << seed_num << ".txt";
+   std::string filename = txtname.str ();
 
-  std::ofstream resultfile;
-  resultfile.open (filename.c_str (), std::ios::app);
-  std::list<Result>::iterator it = m_result.begin ();
-  resultfile << it->nodeid << "   ;\t" << it->Psize << "   ;\t" << it->delay << "   ;\t" << it->success << "   ;\t" << it->discard << std::endl;
-  resultfile.close ();  
-  return;
-*/
+   std::ofstream resultfile;
+   resultfile.open (filename.c_str (), std::ios::app);
+   std::list<Result>::iterator it = m_result.begin ();
+   resultfile << it->nodeid << "   ;\t" << it->Psize << "   ;\t" << it->delay << "   ;\t" << it->success << "   ;\t" << it->discard << std::endl;
+   resultfile.close ();
+   return;
+ */
 
 }
 } // namespace ns3
diff --git a/model/thz-mac-nano.cc b/model/thz-mac-nano.cc
index 410f239..098a38d 100755
--- a/model/thz-mac-nano.cc
+++ b/model/thz-mac-nano.cc
@@ -51,8 +51,8 @@ NS_OBJECT_ENSURE_REGISTERED (THzMacNano);
 
 THzMacNano::THzMacNano ()
   : THzMac (),
-    m_phy (0),
-    m_pktData (0)
+  m_phy (0),
+  m_pktData (0)
 
 {
   m_throughputAll = 0;
@@ -111,23 +111,23 @@ THzMacNano::GetTypeId (void)
     .AddTraceSource ("CtsTimeout",
                      "Trace Hookup for CTS Timeout",
                      MakeTraceSourceAccessor (&THzMacNano::m_traceCtsTimeout),
-                     "ns3::THzMac::TimeTracedCallback") 
+                     "ns3::THzMac::TimeTracedCallback")
     .AddTraceSource ("AckTimeout",
                      "Trace Hookup for ACK Timeout",
                      MakeTraceSourceAccessor (&THzMacNano::m_traceAckTimeout),
-                     "ns3::THzMac::TimeTracedCallback") 
+                     "ns3::THzMac::TimeTracedCallback")
     .AddTraceSource ("SendDataDone",
                      "Trace Hookup for sending a data",
                      MakeTraceSourceAccessor (&THzMacNano::m_traceSendDataDone),
-                     "ns3::THzMac::SendDataDoneTracedCallback") 
+                     "ns3::THzMac::SendDataDoneTracedCallback")
     .AddTraceSource ("Enqueue",
                      "Trace Hookup for enqueue a data",
                      MakeTraceSourceAccessor (&THzMacNano::m_traceEnqueue),
-                     "ns3::THzMac::TimeTracedCallback") 
+                     "ns3::THzMac::TimeTracedCallback")
     .AddTraceSource ("Throughput",
                      "Trace Hookup for Throughput",
                      MakeTraceSourceAccessor (&THzMacNano::m_traceThroughput),
-                     "ns3::THzMac::ThroughputTracedCallback") 
+                     "ns3::THzMac::ThroughputTracedCallback")
   ;
   return tid;
 }
@@ -141,7 +141,7 @@ THzMacNano::SetAntenna ()
   double MaxGain = 40; //dB
   double beamwidthDegrees = 360;
   m_thzAD = m_device->GetDirAntenna ();
-  m_thzAD->SetAttribute ("TuneRxTxMode", DoubleValue (2.0)); 
+  m_thzAD->SetAttribute ("TuneRxTxMode", DoubleValue (2.0));
   NS_LOG_DEBUG ( "Tune as OmnidirectionalMode At node: " << m_device->GetNode ()->GetId () << " Antenna Mode: " << m_thzAD->CheckAntennaMode () );
   m_thzAD->SetAttribute ("InitialAngle", DoubleValue (0.0));
   m_thzAD->SetMaxGain (MaxGain);
@@ -285,8 +285,8 @@ THzMacNano::CheckResources (Ptr<Packet> packet)
   if (header.GetDestination () != GetBroadcast () && m_rtsEnable == true)
     {
       THzMacHeader rtsHeader = THzMacHeader (m_address, m_address, THZ_PKT_TYPE_RTS);
-      uint32_t controlPacketLength = rtsHeader.GetSize();
-      if (m_device->GetNode ()->GetObject<THzEnergyModel> ()->BookEnergy (packet->GetSize () + controlPacketLength, 2*controlPacketLength))
+      uint32_t controlPacketLength = rtsHeader.GetSize ();
+      if (m_device->GetNode ()->GetObject<THzEnergyModel> ()->BookEnergy (packet->GetSize () + controlPacketLength, 2 * controlPacketLength))
         {
           NS_LOG_DEBUG ("Rem Energy after SendRTS: " << m_device->GetNode ()->GetObject<THzEnergyModel> ()->GetRemainingEnergy ());
           SendRts (packet);
@@ -296,7 +296,7 @@ THzMacNano::CheckResources (Ptr<Packet> packet)
   else
     {
       THzMacHeader ackHeader = THzMacHeader (m_address, m_address, THZ_PKT_TYPE_ACK);
-      if (m_device->GetNode ()->GetObject<THzEnergyModel> ()->BookEnergy (packet->GetSize () , ackHeader.GetSize()))
+      if (m_device->GetNode ()->GetObject<THzEnergyModel> ()->BookEnergy (packet->GetSize (), ackHeader.GetSize ()))
         {
           NS_LOG_DEBUG ("Rem Energy after SendData: " << m_device->GetNode ()->GetObject<THzEnergyModel> ()->GetRemainingEnergy ());
           SendData (packet);
@@ -507,9 +507,9 @@ THzMacNano::SendDataDone (bool success, Ptr<Packet> packet)
               NS_LOG_DEBUG ("  overall throughput : " << m_throughputAll);
               NS_LOG_DEBUG ("  average throughput : " << m_throughputavg);
               NS_LOG_UNCOND (" discarded packets: " << m_discarded << " successful packets: " << m_ite << " throughput: " << m_throughput << " average throughput: " << m_throughputavg << " at node: " << m_address);
-  /*----------------------------------------------------------------------------------------
-   * enable the result printing in a .txt file by uncommenting the content below
-   *----------------------------------------------------------------------------------------*/
+              /*----------------------------------------------------------------------------------------
+               * enable the result printing in a .txt file by uncommenting the content below
+               *----------------------------------------------------------------------------------------*/
               /*std::ofstream myfile;
               myfile.open ("nano_2way_sucessful.txt", std::ofstream::out | std::ios::app);
               myfile << m_device->GetNode ()->GetId () << "  " << m_timeRec.GetSeconds () << "   " << it->sequence << std::endl;
@@ -546,7 +546,7 @@ THzMacNano::ReceiveRts (Ptr<Packet> packet)
   NS_LOG_DEBUG ("---------------------------------------------------------------------------------------------------");
 
 
-  m_device->GetNode ()->GetObject<THzEnergyModel> ()->BookEnergy (0 , packet->GetSize ());
+  m_device->GetNode ()->GetObject<THzEnergyModel> ()->BookEnergy (0, packet->GetSize ());
   THzMacHeader header;
   packet->PeekHeader (header);
   NS_LOG_FUNCTION ("      Time: " << Simulator::Now () << " at node: " << m_address << " Energy: " << m_device->GetNode ()->GetObject<THzEnergyModel> ()->GetRemainingEnergy () << " from: " << header.GetSource ());
@@ -643,7 +643,7 @@ THzMacNano::ReceiveData (Ptr<Packet> packet)
   THzMacHeader ackHeader = THzMacHeader (m_address, m_address, THZ_PKT_TYPE_RTS);
   if  (m_rtsEnable == false) // for aloha
     {
-      if (m_device->GetNode ()->GetObject<THzEnergyModel> ()->BookEnergy (ackHeader.GetSize(),packet->GetSize ()) != true )
+      if (m_device->GetNode ()->GetObject<THzEnergyModel> ()->BookEnergy (ackHeader.GetSize (),packet->GetSize ()) != true )
         {
           NS_LOG_INFO ("Insufficient energy");
           return;
@@ -748,8 +748,8 @@ THzMacNano::CtsTimeout (Ptr<Packet> packet)
   m_traceCtsTimeout (m_device->GetNode ()->GetId (), m_device->GetIfIndex ());
 
   THzMacHeader rtsHeader = THzMacHeader (m_address, m_address, THZ_PKT_TYPE_RTS);
-  uint32_t controlPacketLength = rtsHeader.GetSize();
-  m_device->GetNode ()->GetObject<THzEnergyModel> ()->ReturnEnergy (m_FrameLength, 2*controlPacketLength);
+  uint32_t controlPacketLength = rtsHeader.GetSize ();
+  m_device->GetNode ()->GetObject<THzEnergyModel> ()->ReturnEnergy (m_FrameLength, 2 * controlPacketLength);
 
   std::list<CtsTimeouts>::iterator cit = m_ctsTimeouts.begin ();
   for (; cit != m_ctsTimeouts.end (); )
@@ -799,7 +799,7 @@ THzMacNano::AckTimeout (uint16_t sequence)
   m_traceAckTimeout (m_device->GetNode ()->GetId (), m_device->GetIfIndex ());
 
   THzMacHeader rtsHeader = THzMacHeader (m_address, m_address, THZ_PKT_TYPE_RTS);
-  uint32_t controlPacketLength = rtsHeader.GetSize();
+  uint32_t controlPacketLength = rtsHeader.GetSize ();
   m_device->GetNode ()->GetObject<THzEnergyModel> ()->ReturnEnergy (0,controlPacketLength);
 
   std::list<AckTimeouts>::iterator ait = m_ackTimeouts.begin ();
@@ -845,7 +845,7 @@ THzMacNano::DataTimeout (uint16_t sequence)
   NS_LOG_DEBUG ("!!! Data timeout !!! for packet: " << sequence << " at node: " << m_device->GetNode ()->GetId ());
 
   THzMacHeader rtsHeader = THzMacHeader (m_address, m_address, THZ_PKT_TYPE_RTS);
-  uint32_t controlPacketLength = rtsHeader.GetSize();
+  uint32_t controlPacketLength = rtsHeader.GetSize ();
   m_device->GetNode ()->GetObject<THzEnergyModel> ()->ReturnEnergy (controlPacketLength, m_FrameLength);
 
   std::list<DataTimeouts>::iterator dit = m_dataTimeouts.begin ();
diff --git a/model/thz-mac.h b/model/thz-mac.h
index 41c12e9..f46a040 100755
--- a/model/thz-mac.h
+++ b/model/thz-mac.h
@@ -118,34 +118,31 @@ public:
   virtual void Clear (void) = 0;
 
 
-   /**
-   * TracedCallback signature for timeout.
-   *
-   * \param [in] node id.
-   * \param [in] device index.
-   */
-  typedef void (* TimeTracedCallback)
-    (uint32_t nodeID, uint32_t devIndex);
+  /**
+  * TracedCallback signature for timeout.
+  *
+  * \param [in] node id.
+  * \param [in] device index.
+  */
+  typedef void (* TimeTracedCallback)(uint32_t nodeID, uint32_t devIndex);
 
 
-   /**
-   * TracedCallback signature for SendDataDone.
-   *
-   * \param [in] node id.
-   * \param [in] device index.
-   * \param [in] Send Data Done true or false.
-   */
-  typedef void (* SendDataDoneTracedCallback)
-    (uint32_t nodeID, uint32_t devIndex, bool status);
+  /**
+  * TracedCallback signature for SendDataDone.
+  *
+  * \param [in] node id.
+  * \param [in] device index.
+  * \param [in] Send Data Done true or false.
+  */
+  typedef void (* SendDataDoneTracedCallback)(uint32_t nodeID, uint32_t devIndex, bool status);
 
 
-   /**
-   * TracedCallback signature for throughput.
-   *
-   * \param [in] value of throughput.
-   */
-  typedef void (* ThroughputTracedCallback)
-    (uint32_t throughput);
+  /**
+  * TracedCallback signature for throughput.
+  *
+  * \param [in] value of throughput.
+  */
+  typedef void (* ThroughputTracedCallback)(uint32_t throughput);
 
 };
 
diff --git a/model/thz-net-device.cc b/model/thz-net-device.cc
index fef47a0..a6e2800 100755
--- a/model/thz-net-device.cc
+++ b/model/thz-net-device.cc
@@ -44,8 +44,8 @@ NS_OBJECT_ENSURE_REGISTERED (THzNetDevice);
 
 THzNetDevice::THzNetDevice ()
   : NetDevice (),
-    m_mtu (60000),
-    m_arp (true)
+  m_mtu (60000),
+  m_arp (true)
 {
 }
 THzNetDevice::~THzNetDevice ()
@@ -88,34 +88,34 @@ THzNetDevice::GetTypeId ()
 {
   static TypeId tid = TypeId ("ns3::THzNetDevice")
     .SetParent<NetDevice> ()
-    .AddAttribute ("Channel", 
+    .AddAttribute ("Channel",
                    "The channel attached to this device",
                    PointerValue (),
                    MakePointerAccessor (&THzNetDevice::DoGetChannel, &THzNetDevice::SetChannel),
                    MakePointerChecker<THzChannel> ())
-    .AddAttribute ("DirAntenna", 
+    .AddAttribute ("DirAntenna",
                    "The Directional Antenna attached to this device.",
                    PointerValue (),
                    MakePointerAccessor (&THzNetDevice::GetDirAntenna, &THzNetDevice::SetDirAntenna),
                    MakePointerChecker<THzDirectionalAntenna> ())
-    .AddAttribute ("Phy", 
+    .AddAttribute ("Phy",
                    "The PHY layer attached to this device.",
                    PointerValue (),
                    MakePointerAccessor (&THzNetDevice::GetPhy, &THzNetDevice::SetPhy),
                    MakePointerChecker<THzPhy> ())
-    .AddAttribute ("Mac", 
+    .AddAttribute ("Mac",
                    "The MAC layer attached to this device.",
                    PointerValue (),
                    MakePointerAccessor (&THzNetDevice::GetMac, &THzNetDevice::SetMac),
                    MakePointerChecker<THzMac> ())
-    .AddTraceSource ("Rx", 
+    .AddTraceSource ("Rx",
                      "Received payload from the MAC layer.",
                      MakeTraceSourceAccessor (&THzNetDevice::m_rxLogger),
-                     "ns3::Packet::Mac48AddressTracedCallback") 
-    .AddTraceSource ("Tx", 
+                     "ns3::Packet::Mac48AddressTracedCallback")
+    .AddTraceSource ("Tx",
                      "Send payload to the MAC layer.",
                      MakeTraceSourceAccessor (&THzNetDevice::m_txLogger),
-                     "ns3::Packet::Mac48AddressTracedCallback") 
+                     "ns3::Packet::Mac48AddressTracedCallback")
   ;
   return tid;
 }
diff --git a/model/thz-phy-macro.cc b/model/thz-phy-macro.cc
index 6005e0c..1a8e951 100644
--- a/model/thz-phy-macro.cc
+++ b/model/thz-phy-macro.cc
@@ -48,9 +48,9 @@ NS_OBJECT_ENSURE_REGISTERED (THzPhyMacro);
 
 THzPhyMacro::THzPhyMacro ()
   : m_device (0),
-    m_mac (0),
-    m_channel (0),
-    m_pktRx (0)
+  m_mac (0),
+  m_channel (0),
+  m_pktRx (0)
 
 {
   m_csBusy = false;
diff --git a/model/thz-phy-nano.cc b/model/thz-phy-nano.cc
index c53edcf..de77764 100644
--- a/model/thz-phy-nano.cc
+++ b/model/thz-phy-nano.cc
@@ -70,12 +70,12 @@ THzPhyNano::GetTypeId (void)
                    DoubleValue (-20),
                    MakeDoubleAccessor (&THzPhyNano::SetTxPower),
                    MakeDoubleChecker<double> ())
-    .AddAttribute ("PulseDuration", 
+    .AddAttribute ("PulseDuration",
                    "Duration of a short pulse",
                    TimeValue (FemtoSeconds (100)),
                    MakeTimeAccessor (&THzPhyNano::m_pulseDuration),
                    MakeTimeChecker ())
-    .AddAttribute ("Beta", 
+    .AddAttribute ("Beta",
                    "Ratio of symbol duratio to pulse duration",
                    DoubleValue (100),
                    MakeDoubleAccessor (&THzPhyNano::m_beta),
@@ -86,8 +86,8 @@ THzPhyNano::GetTypeId (void)
 
 THzPhyNano::THzPhyNano ()
   : m_device (0),
-    m_mac (0),
-    m_channel (0)
+  m_mac (0),
+  m_channel (0)
 {
   Simulator::ScheduleNow (&THzPhyNano::CalTxPsd, this);
 }
diff --git a/model/thz-phy-nano.h b/model/thz-phy-nano.h
index 4319ba2..f05914c 100644
--- a/model/thz-phy-nano.h
+++ b/model/thz-phy-nano.h
@@ -216,7 +216,7 @@ private:
   double m_numberOfSubBands;
   double m_subBandBandwidth;
   double m_sinrTh;   // SINR threshold
- 
+
   std::list<OngoingTx> m_ongoingTx;
   std::list<OngoingRx> m_ongoingRx;
 
diff --git a/model/thz-spectrum-propagation-loss.cc b/model/thz-spectrum-propagation-loss.cc
index 7dd86c9..1dec55b 100755
--- a/model/thz-spectrum-propagation-loss.cc
+++ b/model/thz-spectrum-propagation-loss.cc
@@ -137,15 +137,15 @@ THzSpectrumPropagationLoss::CalculateAbsLoss (double f, double d) const
   std::ifstream AbsCoefile;
   AbsCoefile.open ("contrib/thz/model/data_AbsCoe.txt", std::ifstream::in);
   if (!AbsCoefile.is_open ())
-	{
-	  NS_FATAL_ERROR ("THzSpectrumPropagationLoss::CalculateAbsLoss: open data_AbsCoe.txt failed 1");
+    {
+      NS_FATAL_ERROR ("THzSpectrumPropagationLoss::CalculateAbsLoss: open data_AbsCoe.txt failed 1");
     }
 
   std:: ifstream frequencyfile;
   frequencyfile.open ("contrib/thz/model/data_frequency.txt", std::ifstream::in);
   if (!frequencyfile.is_open ())
-	{
-	  NS_FATAL_ERROR ("THzSpectrumPropagationLoss::CalculateAbsLoss: open data_frequency.txt failed");
+    {
+      NS_FATAL_ERROR ("THzSpectrumPropagationLoss::CalculateAbsLoss: open data_frequency.txt failed");
     }
   double f_ite;
   double k_ite;
@@ -197,8 +197,8 @@ THzSpectrumPropagationLoss::LoadedAbsCoe (int s, int j, double f, double d,Ptr<c
   std:: ifstream AbsCoefile;
   AbsCoefile.open ("contrib/thz/model/data_AbsCoe.txt", std::ifstream::in);
   if (!AbsCoefile.is_open ())
-	{
-	  NS_FATAL_ERROR ("THzSpectrumPropagationLoss::LoadedAbsCoe: open data_AbsCoe.txt failed");
+    {
+      NS_FATAL_ERROR ("THzSpectrumPropagationLoss::LoadedAbsCoe: open data_AbsCoe.txt failed");
     }
   double k;
   Ptr<SpectrumValue> kf_store = Copy <SpectrumValue> (txPsd);
diff --git a/model/thz-spectrum-signal-parameters.cc b/model/thz-spectrum-signal-parameters.cc
index d64066b..8e6c4d5 100644
--- a/model/thz-spectrum-signal-parameters.cc
+++ b/model/thz-spectrum-signal-parameters.cc
@@ -60,7 +60,7 @@ Ptr<SpectrumSignalParameters>
 THzSpectrumSignalParameters::Copy ()
 {
   NS_LOG_FUNCTION (this);
- 
+
   Ptr<THzSpectrumSignalParameters> tssp (new THzSpectrumSignalParameters (*this), false);
   return tssp;
 }
diff --git a/model/thz-spectrum-signal-parameters.h b/model/thz-spectrum-signal-parameters.h
index 0e5e2d8..d54924f 100644
--- a/model/thz-spectrum-signal-parameters.h
+++ b/model/thz-spectrum-signal-parameters.h
@@ -54,12 +54,12 @@ struct THzSpectrumSignalParameters : public SpectrumSignalParameters
 
   THzSpectrumSignalParameters (const THzSpectrumSignalParameters& p);
   /**
-   * The power spectral density of the transmitted signal. 
+   * The power spectral density of the transmitted signal.
    */
   Ptr <SpectrumValue> txPsd;
 
   /**
-   * The duration of the packet transmission. 
+   * The duration of the packet transmission.
    */
   Time txDuration;
 
@@ -73,27 +73,27 @@ struct THzSpectrumSignalParameters : public SpectrumSignalParameters
    */
   Ptr<Packet> packet;
   /**
-   * The transmission power. 
+   * The transmission power.
    */
   double txPower;
   /**
-   * The number of frequency samples from the database. 
+   * The number of frequency samples from the database.
    */
   double numberOfSamples;
   /**
-   * The number of sub-bands from the database. 
+   * The number of sub-bands from the database.
    */
   double numberOfSubBands;
   /**
-   * The bandwidth of individual sub-band. 
+   * The bandwidth of individual sub-band.
    */
   double subBandBandwidth;
   /**
-   * The center frequency of the overall signal band. 
+   * The center frequency of the overall signal band.
    */
   double centerFrequency;
   /**
-   * The total bandwidth of the signal. 
+   * The total bandwidth of the signal.
    */
   double totalBandwidth;
 };
diff --git a/model/thz-spectrum-waveform.cc b/model/thz-spectrum-waveform.cc
index 6815906..1ccb461 100755
--- a/model/thz-spectrum-waveform.cc
+++ b/model/thz-spectrum-waveform.cc
@@ -45,27 +45,27 @@ THzSpectrumValueFactory::GetTypeId ()
 {
   static TypeId tid = TypeId ("ns3::THzSpectrumValueFactory")
     .SetParent<Object> ()
-    .AddAttribute ("NumSubBand", 
+    .AddAttribute ("NumSubBand",
                    "The number of sub-bands containing in the selected 3dB frequency window",
-                   DoubleValue (98), 
+                   DoubleValue (98),
                    MakeDoubleAccessor (&THzSpectrumValueFactory::m_numsb),
                    MakeDoubleChecker<int> ())
-    .AddAttribute ("SubBandWidth", 
+    .AddAttribute ("SubBandWidth",
                    "The bandwidth of each sub-band",
                    DoubleValue (7.6294e8),
                    MakeDoubleAccessor (&THzSpectrumValueFactory::m_sbw),
                    MakeDoubleChecker<double> ())
-    .AddAttribute ("TotalBandWidth", 
+    .AddAttribute ("TotalBandWidth",
                    "The total bandwidth of the selected 3dB frequency window",
                    DoubleValue (7.4768e10),
                    MakeDoubleAccessor (&THzSpectrumValueFactory::m_tbw),
                    MakeDoubleChecker<double> ())
-    .AddAttribute ("CentralFrequency", 
+    .AddAttribute ("CentralFrequency",
                    "The central frequency of the selected 3dB frequency window",
                    DoubleValue (1.0345e+012),
                    MakeDoubleAccessor (&THzSpectrumValueFactory::m_fc),
                    MakeDoubleChecker<double> ())
-    .AddAttribute ("NumSample", 
+    .AddAttribute ("NumSample",
                    "The number of sample bands of the selected 3dB frequency window",
                    DoubleValue (100),
                    MakeDoubleAccessor (&THzSpectrumValueFactory::m_numsample),
@@ -84,15 +84,15 @@ THzSpectrumValueFactory::~THzSpectrumValueFactory ()
 Ptr<SpectrumModel>
 THzSpectrumValueFactory::THzSpectrumWaveformInitializer ()
 {
-  m_numsb = m_tbw/m_sbw;
+  m_numsb = m_tbw / m_sbw;
   m_fstart = m_fc - (m_numsb / 2) * m_sbw;
-  NS_LOG_DEBUG("CHECK: THzSpectrumWaveformInitializer: m_numsb = "<< m_numsb);
+  NS_LOG_DEBUG ("CHECK: THzSpectrumWaveformInitializer: m_numsb = " << m_numsb);
 
   std:: ifstream frequencyfile;
   frequencyfile.open ("contrib/thz/model/data_frequency.txt", std::ifstream::in);
   if (!frequencyfile.is_open ())
     {
-	  NS_LOG_UNCOND("THzSpectrumValueFactory::THzSpectrumWaveformInitializer: open data_frequency.txt failed");
+      NS_LOG_UNCOND ("THzSpectrumValueFactory::THzSpectrumWaveformInitializer: open data_frequency.txt failed");
     }
 
   double f_starV;                      // Detected frequency from the frequency database
@@ -164,13 +164,13 @@ THzSpectrumValueFactory::THzPulseSpectrumWaveformInitializer ()
   frequencyfile.open ("contrib/thz/model/data_frequency.txt", std::ifstream::in);
   if (!frequencyfile.is_open ())
     {
-	  NS_LOG_UNCOND ( "THzSpectrumValueFactory::THzPulseSpectrumWaveformInitializer: open data_frequency.txt failed" );
+      NS_LOG_UNCOND ( "THzSpectrumValueFactory::THzPulseSpectrumWaveformInitializer: open data_frequency.txt failed" );
     }
 
 
   Bands bands;
-  double pulseStartingSample = PULSE_START_FREQUENCY/m_sbw;
-  m_numsb = (PULSE_END_FREQUENCY - PULSE_START_FREQUENCY)/m_sbw;
+  double pulseStartingSample = PULSE_START_FREQUENCY / m_sbw;
+  m_numsb = (PULSE_END_FREQUENCY - PULSE_START_FREQUENCY) / m_sbw;
 
   for (int j = 0; j < m_numsample; j++)
     {
@@ -198,7 +198,7 @@ THzSpectrumValueFactory::FreqSeqStart ()    // return sequence number of the fir
   frequencyfile.open ("contrib/thz/model/data_frequency.txt", std::ifstream::in);
   if (!frequencyfile.is_open ())
     {
-	  NS_LOG_UNCOND ( "THzSpectrumValueFactory::FreqSeqStart: open data_frequency.txt failed" );
+      NS_LOG_UNCOND ( "THzSpectrumValueFactory::FreqSeqStart: open data_frequency.txt failed" );
     }
 
   double f;
@@ -225,7 +225,7 @@ THzSpectrumValueFactory::FreqStartValue ()
   frequencyfile.open ("contrib/thz/model/data_frequency.txt", std::ifstream::in);
   if (!frequencyfile.is_open ())
     {
-	  NS_LOG_UNCOND ( "THzSpectrumValueFactory::FreqStartValue: open data_frequency.txt failed" );
+      NS_LOG_UNCOND ( "THzSpectrumValueFactory::FreqStartValue: open data_frequency.txt failed" );
     }
 
   double f;
@@ -247,7 +247,7 @@ THzSpectrumValueFactory::FreqBands ()
   frequencyfile.open ("contrib/thz/model/data_frequency.txt", std::ifstream::in);
   if (!frequencyfile.is_open ())
     {
-	  NS_LOG_UNCOND ( "THzSpectrumValueFactory::FreqBands: open data_frequency.txt failed" );
+      NS_LOG_UNCOND ( "THzSpectrumValueFactory::FreqBands: open data_frequency.txt failed" );
     }
 
   double f;
@@ -277,7 +277,7 @@ THzSpectrumValueFactory::FreqSeqEnd ()    // return the sequence number of the l
   frequencyfile.open ("contrib/thz/model/data_frequency.txt", std::ifstream::in);
   if (!frequencyfile.is_open ())
     {
-	  NS_LOG_UNCOND ( "THzSpectrumValueFactory::FreqSeqEnd: open data_frequency.txt failed" );
+      NS_LOG_UNCOND ( "THzSpectrumValueFactory::FreqSeqEnd: open data_frequency.txt failed" );
     }
 
   double f;
@@ -327,7 +327,7 @@ THzSpectrumValueFactory::CreateTxPowerSpectralDensity (double txPower)
   frequencyfile.open ("contrib/thz/model/data_frequency.txt", std::ifstream::in);
   if (!frequencyfile.is_open ())
     {
-	  NS_LOG_UNCOND ( "THzSpectrumValueFactory::CreateTxPowerSpectralDensity: open data_frequency.txt failed" );
+      NS_LOG_UNCOND ( "THzSpectrumValueFactory::CreateTxPowerSpectralDensity: open data_frequency.txt failed" );
     }
 
 
@@ -347,7 +347,7 @@ THzSpectrumValueFactory::CreateTxPowerSpectralDensity (double txPower)
 
   Bands bands;
 
-  m_numsb = m_tbw/m_sbw;
+  m_numsb = m_tbw / m_sbw;
 
   for (int j = 0; j < m_numsample; j++)
     {
@@ -358,7 +358,7 @@ THzSpectrumValueFactory::CreateTxPowerSpectralDensity (double txPower)
       bands.push_back (bi);
     }
 
-  NS_LOG_DEBUG("CHECK:CreateTxPowerSpectralDensity: m_numsb = "<< m_numsb);
+  NS_LOG_DEBUG ("CHECK:CreateTxPowerSpectralDensity: m_numsb = " << m_numsb);
 
   Ptr<SpectrumModel> txBand = Create <SpectrumModel> (bands);
   Ptr<SpectrumValue> txPsd = Create <SpectrumValue> (txBand);
@@ -462,7 +462,7 @@ THzSpectrumValueFactory::CreateAllPowerSpectralDensity (double n, double r, doub
   frequencyfile.open ("contrib/thz/model/data_frequency.txt", std::ifstream::in);
   if (!frequencyfile.is_open ())
     {
-	  NS_LOG_UNCOND ( "THzSpectrumValueFactory::CreateAllPowerSpectralDensity: open data_frequency.txt failed" );
+      NS_LOG_UNCOND ( "THzSpectrumValueFactory::CreateAllPowerSpectralDensity: open data_frequency.txt failed" );
     }
   double f;
   int i = 0;
diff --git a/model/thz-udp-client.cc b/model/thz-udp-client.cc
index dd249e4..ce7899d 100644
--- a/model/thz-udp-client.cc
+++ b/model/thz-udp-client.cc
@@ -58,7 +58,7 @@ THzUdpClient::GetTypeId (void)
                    AddressValue (),
                    MakeAddressAccessor (&THzUdpClient::m_peerAddress),
                    MakeAddressChecker ())
-    .AddAttribute ("RemotePort", 
+    .AddAttribute ("RemotePort",
                    "The destination port of the outbound packets",
                    UintegerValue (100),
                    MakeUintegerAccessor (&THzUdpClient::m_peerPort),
@@ -68,7 +68,7 @@ THzUdpClient::GetTypeId (void)
                    UintegerValue (1024),
                    MakeUintegerAccessor (&THzUdpClient::m_size),
                    MakeUintegerChecker<uint32_t> (12,60000))
-    .AddAttribute ("Mean", 
+    .AddAttribute ("Mean",
                    "The mean delay between two packets (s)",
                    DoubleValue (500.0),
                    MakeDoubleAccessor (&THzUdpClient::m_mean),
diff --git a/model/traffic-generator.cc b/model/traffic-generator.cc
index 0f3e891..1d905e3 100644
--- a/model/traffic-generator.cc
+++ b/model/traffic-generator.cc
@@ -50,12 +50,12 @@ TrafficGenerator::GetTypeId (void)
   static TypeId tid = TypeId ("TrafficGenerator")
     .SetParent<Application> ()
     .AddConstructor<TrafficGenerator> ()
-    .AddAttribute ("Mean", 
+    .AddAttribute ("Mean",
                    "The mean delay between two packets (s)",
                    DoubleValue (500.0),
                    MakeDoubleAccessor (&TrafficGenerator::m_mean),
                    MakeDoubleChecker<double> ())
-    .AddAttribute ("PacketSize", 
+    .AddAttribute ("PacketSize",
                    "The size of each packet (bytes)",
                    UintegerValue (128),
                    MakeUintegerAccessor (&TrafficGenerator::m_size),
diff --git a/test/test-thz-directional-antenna.cc b/test/test-thz-directional-antenna.cc
index 7050a7a..cca26f3 100644
--- a/test/test-thz-directional-antenna.cc
+++ b/test/test-thz-directional-antenna.cc
@@ -36,23 +36,23 @@ NS_LOG_COMPONENT_DEFINE ("THzDirectionalAntennaTestSuite");
 class THzDirectionalAntennaTestCase : public TestCase
 {
 public:
-   THzDirectionalAntennaTestCase();
-   ~THzDirectionalAntennaTestCase();
+  THzDirectionalAntennaTestCase ();
+  ~THzDirectionalAntennaTestCase ();
 
-   void DoRun(void);
+  void DoRun (void);
 };
 
-THzDirectionalAntennaTestCase::THzDirectionalAntennaTestCase()
- :TestCase("Terahertz Directional Antenna test case")
+THzDirectionalAntennaTestCase::THzDirectionalAntennaTestCase ()
+  : TestCase ("Terahertz Directional Antenna test case")
 {
 }
-THzDirectionalAntennaTestCase::~THzDirectionalAntennaTestCase()
+THzDirectionalAntennaTestCase::~THzDirectionalAntennaTestCase ()
 {
 }
 
 
-void 
-THzDirectionalAntennaTestCase::DoRun()
+void
+THzDirectionalAntennaTestCase::DoRun ()
 {
   //--- setting up ---//
   Ptr<MobilityModel> rx_node = CreateObject<ConstantPositionMobilityModel> ();
@@ -98,7 +98,7 @@ THzDirectionalAntennaTestCase::DoRun()
   // Make the graphics file, which the plot file will create when it
   // is used with Gnuplot, be a PNG file.
   plot.SetTerminal ("png");
-  plot.AppendExtra("set grid xtics ytics");
+  plot.AppendExtra ("set grid xtics ytics");
 
   // Set the labels for each axis.
   plot.SetLegend ("Orientation of RXDA [Degree]", "Total Gain [dB]");
@@ -117,9 +117,9 @@ public:
 };
 
 THzDirectionalAntennaTestSuite::THzDirectionalAntennaTestSuite ()
-  :TestSuite ("thz-directional-antenna", UNIT)
+  : TestSuite ("thz-directional-antenna", UNIT)
 {
-  AddTestCase(new THzDirectionalAntennaTestCase, TestCase::QUICK);
+  AddTestCase (new THzDirectionalAntennaTestCase, TestCase::QUICK);
 }
 
 // create an instance of the test suite
diff --git a/test/test-thz-path-loss.cc b/test/test-thz-path-loss.cc
index 432aedd..73ac0d2 100644
--- a/test/test-thz-path-loss.cc
+++ b/test/test-thz-path-loss.cc
@@ -41,17 +41,17 @@ NS_LOG_COMPONENT_DEFINE ("THzPathLossTestSuite");
 class THzPathLossTestCase : public TestCase
 {
 public:
-  THzPathLossTestCase();
-  ~THzPathLossTestCase();
+  THzPathLossTestCase ();
+  ~THzPathLossTestCase ();
   void DoRun (void);
   double DbmToW (double dbm);
 };
 
-THzPathLossTestCase::THzPathLossTestCase()
-  : TestCase("Terahertz Path Loss test case")
-{  
+THzPathLossTestCase::THzPathLossTestCase ()
+  : TestCase ("Terahertz Path Loss test case")
+{
 }
-THzPathLossTestCase::~THzPathLossTestCase()
+THzPathLossTestCase::~THzPathLossTestCase ()
 {
 }
 
@@ -64,7 +64,7 @@ THzPathLossTestCase::DbmToW (double dbm)
 }
 
 void
-THzPathLossTestCase::DoRun()
+THzPathLossTestCase::DoRun ()
 {
 
   LogComponentEnable ("THzSpectrumPropagationLoss", LOG_LEVEL_ALL);
@@ -76,7 +76,7 @@ THzPathLossTestCase::DoRun()
   Gnuplot plot (graphicsFileName);
   //plot.SetTitle (plotTitle);
   plot.SetLegend ("Distance (m)", "Recieved Power (dBm)");
-  plot.AppendExtra("set grid xtics ytics");
+  plot.AppendExtra ("set grid xtics ytics");
 
   Ptr<THzSpectrumPropagationLoss> lossModel = CreateObject<THzSpectrumPropagationLoss> ();
 
@@ -130,11 +130,11 @@ THzPathLossTestCase::DoRun()
 class THzPathLossTestSuite : public TestSuite
 {
 public:
-  THzPathLossTestSuite();
+  THzPathLossTestSuite ();
 };
 
 THzPathLossTestSuite::THzPathLossTestSuite ()
-  : TestSuite("thz-path-loss", UNIT)
+  : TestSuite ("thz-path-loss", UNIT)
 {
   AddTestCase (new THzPathLossTestCase, TestCase::QUICK);
 }
diff --git a/test/test-thz-psd-macro.cc b/test/test-thz-psd-macro.cc
index 0c21d81..284d837 100644
--- a/test/test-thz-psd-macro.cc
+++ b/test/test-thz-psd-macro.cc
@@ -39,18 +39,18 @@ NS_LOG_COMPONENT_DEFINE ("THzPsdMacroTestSuite");
 
 class THzPsdMacroTestCase : public TestCase
 {
-public: 
+public:
   THzPsdMacroTestCase ();
-  ~THzPsdMacroTestCase();
+  ~THzPsdMacroTestCase ();
   void DoRun (void);
   double DbmToW (double dbm);
 };
 
-THzPsdMacroTestCase::THzPsdMacroTestCase()
+THzPsdMacroTestCase::THzPsdMacroTestCase ()
   : TestCase ("terahertz PSD Macro test case")
 {
 }
-THzPsdMacroTestCase::~THzPsdMacroTestCase()
+THzPsdMacroTestCase::~THzPsdMacroTestCase ()
 {
 }
 
@@ -64,17 +64,17 @@ THzPsdMacroTestCase::DbmToW (double dbm)
 void
 THzPsdMacroTestCase::DoRun ()
 {
-  LogComponentEnable("THzSpectrumPropagationLoss", LOG_LEVEL_ALL);
+  LogComponentEnable ("THzSpectrumPropagationLoss", LOG_LEVEL_ALL);
   std::string fileNameWithNoExtension = "thz-received-power-spectral-density-macro";
   std::string graphicsFileName        = fileNameWithNoExtension + ".png";
   std::string plotFileName            = fileNameWithNoExtension + ".plt";
   //std::string plotTitle               = "THz received signal power spectral density for nanoscale communication";
-        
-  Gnuplot plot(graphicsFileName);
+
+  Gnuplot plot (graphicsFileName);
   //plot.SetTitle(plotTitle);
   plot.SetLegend ("Frequency [THz]", "p.s.d. [Watts/Hz]");
-  plot.AppendExtra("set grid xtics ytics");
-    
+  plot.AppendExtra ("set grid xtics ytics");
+
   Ptr<THzSpectrumPropagationLoss> lossModel = CreateObject<THzSpectrumPropagationLoss> ();
   Config::SetDefault ("ns3::THzSpectrumValueFactory::TotalBandWidth", DoubleValue (7.476812e10));
   Config::SetDefault ("ns3::THzSpectrumValueFactory::NumSample", DoubleValue (1));
@@ -82,12 +82,12 @@ THzPsdMacroTestCase::DoRun ()
   Gnuplot2dDataset dataset;
   dataset.SetTitle ("Transmitted signal p.s.d. for macroscale");
   dataset.SetStyle (Gnuplot2dDataset::LINES_POINTS);
-    
+
   double txPowerDbm = -20;//dBm
-  double txPowerW = DbmToW(txPowerDbm);
+  double txPowerW = DbmToW (txPowerDbm);
   double gain = 17.27;
   gain = std::pow (10.0, gain / 10.0);
-  
+
   double distance = 10;//m
   Ptr<SpectrumValue> txPsd;
   Ptr<SpectrumValue> rxPsd;
@@ -99,31 +99,31 @@ THzPsdMacroTestCase::DoRun ()
   InitTHzSpectrumWave = sf->THzSpectrumWaveformInitializer ();
   InitTHzSpectrumWaveAll = sf->AllTHzSpectrumWaveformInitializer ();
   txPsd = sf->CreateTxPowerSpectralDensityMask (txPowerW);
-  
-    Ptr<MobilityModel> a = CreateObject<ConstantPositionMobilityModel> ();
-    a->SetPosition (Vector (0,0,0));
-    Ptr<MobilityModel> b = CreateObject<ConstantPositionMobilityModel> ();
-    b->SetPosition (Vector (distance, 0, 0));
-    rxPsd = lossModel->CalcRxPowerSpectralDensity (txPsd, a, b);
-
-    Values::iterator vit = txPsd->ValuesBegin ();
-    Bands::const_iterator fit = txPsd->ConstBandsBegin ();
-
-    while (vit != txPsd->ValuesEnd ())
-      {
-	NS_ASSERT (fit != txPsd->ConstBandsEnd ());
-	dataset.Add(fit->fc/1e12, std::log10 (*vit * 2*gain));      
-	
-	++vit;
-	++fit; 
-      }
-    plot.AddDataset(dataset);
-
-    std::ofstream plotFile (plotFileName.c_str());
-    
-    plot.GenerateOutput (plotFile);
-    plotFile.close ();
-    
+
+  Ptr<MobilityModel> a = CreateObject<ConstantPositionMobilityModel> ();
+  a->SetPosition (Vector (0,0,0));
+  Ptr<MobilityModel> b = CreateObject<ConstantPositionMobilityModel> ();
+  b->SetPosition (Vector (distance, 0, 0));
+  rxPsd = lossModel->CalcRxPowerSpectralDensity (txPsd, a, b);
+
+  Values::iterator vit = txPsd->ValuesBegin ();
+  Bands::const_iterator fit = txPsd->ConstBandsBegin ();
+
+  while (vit != txPsd->ValuesEnd ())
+    {
+      NS_ASSERT (fit != txPsd->ConstBandsEnd ());
+      dataset.Add (fit->fc / 1e12, std::log10 (*vit * 2 * gain));
+
+      ++vit;
+      ++fit;
+    }
+  plot.AddDataset (dataset);
+
+  std::ofstream plotFile (plotFileName.c_str ());
+
+  plot.GenerateOutput (plotFile);
+  plotFile.close ();
+
 }
 
 class THzPsdMacroTestSuite : public TestSuite
@@ -133,9 +133,9 @@ public:
 };
 
 THzPsdMacroTestSuite::THzPsdMacroTestSuite ()
-  :TestSuite ("thz-psd-macro", UNIT)
+  : TestSuite ("thz-psd-macro", UNIT)
 {
-AddTestCase(new THzPsdMacroTestCase, TestCase::QUICK);
+  AddTestCase (new THzPsdMacroTestCase, TestCase::QUICK);
 }
 // create an instance of the test suite
 static THzPsdMacroTestSuite g_thzPsdMacroTestSuite;
diff --git a/test/test-thz-psd-nano.cc b/test/test-thz-psd-nano.cc
index e4f3d50..c4a9397 100644
--- a/test/test-thz-psd-nano.cc
+++ b/test/test-thz-psd-nano.cc
@@ -40,18 +40,18 @@ NS_LOG_COMPONENT_DEFINE ("THzPsdNanoTestSuite");
 class THzPsdNanoTestCase : public TestCase
 {
 public:
-  THzPsdNanoTestCase();
-  ~THzPsdNanoTestCase();
-  void DoRun(void);
+  THzPsdNanoTestCase ();
+  ~THzPsdNanoTestCase ();
+  void DoRun (void);
   double DbmToW (double dbm);
 };
 
-THzPsdNanoTestCase::THzPsdNanoTestCase()
-  : TestCase("terahertz Rx PSD Nano test case")
+THzPsdNanoTestCase::THzPsdNanoTestCase ()
+  : TestCase ("terahertz Rx PSD Nano test case")
 {
 }
 
-THzPsdNanoTestCase::~THzPsdNanoTestCase()
+THzPsdNanoTestCase::~THzPsdNanoTestCase ()
 {
 }
 
@@ -73,10 +73,10 @@ THzPsdNanoTestCase::DoRun ()
   Gnuplot plot (graphicsFileName);
   //plot.SetTitle (plotTitle);
   plot.SetLegend ("Frequency [THz]", "p.s.d. [Watts/Hz]");
-  plot.AppendExtra("set grid xtics ytics");
+  plot.AppendExtra ("set grid xtics ytics");
 
   Ptr<THzSpectrumPropagationLoss> lossModel = CreateObject<THzSpectrumPropagationLoss> ();
-  
+
   Config::SetDefault ("ns3::THzSpectrumValueFactory::NumSample", DoubleValue (1000));
   Gnuplot2dDataset dataset;
   dataset.SetTitle ("Transmitted pulse p.s.d. for nanoscale");
@@ -103,11 +103,11 @@ THzPsdNanoTestCase::DoRun ()
 
   Values::iterator vit = txPsd->ValuesBegin ();
   Bands::const_iterator fit = txPsd->ConstBandsBegin ();
-  
+
   while (vit != txPsd->ValuesEnd ())
     {
       NS_ASSERT (fit != txPsd->ConstBandsEnd ());
-      dataset.Add (fit->fc/1e12, *vit);
+      dataset.Add (fit->fc / 1e12, *vit);
 
       ++vit;
       ++fit;
@@ -124,13 +124,13 @@ THzPsdNanoTestCase::DoRun ()
 class THzPsdNanoTestSuite : public TestSuite
 {
 public:
-  THzPsdNanoTestSuite();
+  THzPsdNanoTestSuite ();
 };
 
-THzPsdNanoTestSuite::THzPsdNanoTestSuite()
-  :TestSuite("thz-rx-psd-nano", UNIT)
+THzPsdNanoTestSuite::THzPsdNanoTestSuite ()
+  : TestSuite ("thz-rx-psd-nano", UNIT)
 {
-AddTestCase(new THzPsdNanoTestCase, TestCase::QUICK);
+  AddTestCase (new THzPsdNanoTestCase, TestCase::QUICK);
 }
 //create an instance of the test suite
 static THzPsdNanoTestSuite g_thzPsdNanoTestSuite;
